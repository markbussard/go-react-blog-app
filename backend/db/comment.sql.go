// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: comment.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comment (user_id, post_id, body) VALUES ($1, $2, $3) RETURNING id, user_id, post_id, body, created_at, updated_at, deleted_at
`

type CreateCommentParams struct {
	UserID uuid.UUID `json:"userId"`
	PostID uuid.UUID `json:"postId"`
	Body   string    `json:"body"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRow(ctx, createComment, arg.UserID, arg.PostID, arg.Body)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PostID,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteCommentByIDs = `-- name: DeleteCommentByIDs :exec
UPDATE comment
SET deleted_at = NOW()
WHERE id = $1 AND user_id = $2 AND post_id = $3 RETURNING id, user_id, post_id, body, created_at, updated_at, deleted_at
`

type DeleteCommentByIDsParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"userId"`
	PostID uuid.UUID `json:"postId"`
}

func (q *Queries) DeleteCommentByIDs(ctx context.Context, arg DeleteCommentByIDsParams) error {
	_, err := q.db.Exec(ctx, deleteCommentByIDs, arg.ID, arg.UserID, arg.PostID)
	return err
}

const findCommentsByPostID = `-- name: FindCommentsByPostID :many
SELECT 
  comment.id, 
  comment.body, 
  comment.created_at, 
  "user".email as author_name,
  COUNT(DISTINCT "like".id) as like_count
FROM comment
LEFT JOIN "user" ON comment.user_id = "user".id
LEFT JOIN "like" ON comment.id = "like".likeable_id AND "like".likeable_type = 'COMMENT'
WHERE comment.post_id = $1 AND comment.deleted_at is null
GROUP BY comment.id, comment.body, comment.created_at, "user".email
ORDER BY comment.created_at DESC
`

type FindCommentsByPostIDRow struct {
	ID         uuid.UUID        `json:"id"`
	Body       string           `json:"body"`
	CreatedAt  pgtype.Timestamp `json:"createdAt"`
	AuthorName pgtype.Text      `json:"authorName"`
	LikeCount  int64            `json:"likeCount"`
}

func (q *Queries) FindCommentsByPostID(ctx context.Context, postID uuid.UUID) ([]FindCommentsByPostIDRow, error) {
	rows, err := q.db.Query(ctx, findCommentsByPostID, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindCommentsByPostIDRow{}
	for rows.Next() {
		var i FindCommentsByPostIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Body,
			&i.CreatedAt,
			&i.AuthorName,
			&i.LikeCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findCommentsWithLikedByUser = `-- name: FindCommentsWithLikedByUser :many
SELECT 
  comment.id, 
  comment.body, 
  comment.created_at, 
  "user".email as author_name,
  COUNT(DISTINCT "like".id) as like_count,
  CASE WHEN COUNT(DISTINCT liked_by_user.id) > 0 THEN true ELSE false END as is_liked
FROM comment
LEFT JOIN "user" ON comment.user_id = "user".id
LEFT JOIN "like" ON comment.id = "like".likeable_id AND "like".likeable_type = 'COMMENT'
LEFT JOIN "like" as liked_by_user ON comment.id = liked_by_user.likeable_id AND liked_by_user.likeable_type = 'COMMENT' AND liked_by_user.user_id = $2
WHERE comment.post_id = $1 AND comment.deleted_at is null
GROUP BY comment.id, comment.body, comment.created_at, "user".email
ORDER BY comment.created_at DESC
`

type FindCommentsWithLikedByUserParams struct {
	PostID uuid.UUID `json:"postId"`
	UserID uuid.UUID `json:"userId"`
}

type FindCommentsWithLikedByUserRow struct {
	ID         uuid.UUID        `json:"id"`
	Body       string           `json:"body"`
	CreatedAt  pgtype.Timestamp `json:"createdAt"`
	AuthorName pgtype.Text      `json:"authorName"`
	LikeCount  int64            `json:"likeCount"`
	IsLiked    bool             `json:"isLiked"`
}

func (q *Queries) FindCommentsWithLikedByUser(ctx context.Context, arg FindCommentsWithLikedByUserParams) ([]FindCommentsWithLikedByUserRow, error) {
	rows, err := q.db.Query(ctx, findCommentsWithLikedByUser, arg.PostID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindCommentsWithLikedByUserRow{}
	for rows.Next() {
		var i FindCommentsWithLikedByUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Body,
			&i.CreatedAt,
			&i.AuthorName,
			&i.LikeCount,
			&i.IsLiked,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateComment = `-- name: UpdateComment :one
UPDATE comment
SET 
  body = $4,
  updated_at = NOW()
WHERE id = $1 AND user_id = $2 AND post_id = $3 RETURNING id, user_id, post_id, body, created_at, updated_at, deleted_at
`

type UpdateCommentParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"userId"`
	PostID uuid.UUID `json:"postId"`
	Body   string    `json:"body"`
}

func (q *Queries) UpdateComment(ctx context.Context, arg UpdateCommentParams) (Comment, error) {
	row := q.db.QueryRow(ctx, updateComment,
		arg.ID,
		arg.UserID,
		arg.PostID,
		arg.Body,
	)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PostID,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
