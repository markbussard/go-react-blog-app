// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: like.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createLike = `-- name: CreateLike :one
INSERT INTO "like" (user_id, likeable_id, likeable_type) VALUES ($1, $2, $3) RETURNING id, user_id, likeable_id, likeable_type, created_at
`

type CreateLikeParams struct {
	UserID       uuid.UUID    `json:"userId"`
	LikeableID   uuid.UUID    `json:"likeableId"`
	LikeableType LikeableType `json:"likeableType"`
}

func (q *Queries) CreateLike(ctx context.Context, arg CreateLikeParams) (Like, error) {
	row := q.db.QueryRow(ctx, createLike, arg.UserID, arg.LikeableID, arg.LikeableType)
	var i Like
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.LikeableID,
		&i.LikeableType,
		&i.CreatedAt,
	)
	return i, err
}

const deleteLike = `-- name: DeleteLike :exec
DELETE FROM "like" WHERE user_id = $1 AND likeable_id = $2 AND likeable_type = $3
`

type DeleteLikeParams struct {
	UserID       uuid.UUID    `json:"userId"`
	LikeableID   uuid.UUID    `json:"likeableId"`
	LikeableType LikeableType `json:"likeableType"`
}

func (q *Queries) DeleteLike(ctx context.Context, arg DeleteLikeParams) error {
	_, err := q.db.Exec(ctx, deleteLike, arg.UserID, arg.LikeableID, arg.LikeableType)
	return err
}

const findLikesByLikeableID = `-- name: FindLikesByLikeableID :many
SELECT id, user_id, likeable_id, likeable_type, created_at FROM "like" WHERE likeable_id = $1 AND likeable_type = $2 ORDER BY created_at DESC
`

type FindLikesByLikeableIDParams struct {
	LikeableID   uuid.UUID    `json:"likeableId"`
	LikeableType LikeableType `json:"likeableType"`
}

func (q *Queries) FindLikesByLikeableID(ctx context.Context, arg FindLikesByLikeableIDParams) ([]Like, error) {
	rows, err := q.db.Query(ctx, findLikesByLikeableID, arg.LikeableID, arg.LikeableType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Like{}
	for rows.Next() {
		var i Like
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.LikeableID,
			&i.LikeableType,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
