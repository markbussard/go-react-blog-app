// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: post.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createPost = `-- name: CreatePost :one
INSERT INTO post (author_id, title, body, status) VALUES ($1, $2, $3, $4) RETURNING id, author_id, title, body, status, created_at, updated_at, deleted_at
`

type CreatePostParams struct {
	AuthorID uuid.UUID  `json:"authorId"`
	Title    string     `json:"title"`
	Body     string     `json:"body"`
	Status   PostStatus `json:"status"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, createPost,
		arg.AuthorID,
		arg.Title,
		arg.Body,
		arg.Status,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.Title,
		&i.Body,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deletePostByIDs = `-- name: DeletePostByIDs :exec
DELETE FROM post WHERE author_id = $1 AND id = $2
`

type DeletePostByIDsParams struct {
	AuthorID uuid.UUID `json:"authorId"`
	ID       uuid.UUID `json:"id"`
}

func (q *Queries) DeletePostByIDs(ctx context.Context, arg DeletePostByIDsParams) error {
	_, err := q.db.Exec(ctx, deletePostByIDs, arg.AuthorID, arg.ID)
	return err
}

const findPostByIDs = `-- name: FindPostByIDs :one
SELECT id, author_id, title, body, status, created_at, updated_at, deleted_at FROM post WHERE author_id = $1 AND id = $2 LIMIT 1
`

type FindPostByIDsParams struct {
	AuthorID uuid.UUID `json:"authorId"`
	ID       uuid.UUID `json:"id"`
}

func (q *Queries) FindPostByIDs(ctx context.Context, arg FindPostByIDsParams) (Post, error) {
	row := q.db.QueryRow(ctx, findPostByIDs, arg.AuthorID, arg.ID)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.Title,
		&i.Body,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const findPostsByAuthor = `-- name: FindPostsByAuthor :many
SELECT id, author_id, title, body, status, created_at, updated_at, deleted_at FROM post WHERE author_id = $1 ORDER BY id DESC
`

func (q *Queries) FindPostsByAuthor(ctx context.Context, authorID uuid.UUID) ([]Post, error) {
	rows, err := q.db.Query(ctx, findPostsByAuthor, authorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.AuthorID,
			&i.Title,
			&i.Body,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPosts = `-- name: GetPosts :many
SELECT post.id, post.title, post.body, post.created_at, post.updated_at, "user".email as author_email
FROM post
LEFT JOIN "user" ON post.author_id = "user".id
WHERE deleted_at is null AND status = 'PUBLISHED'
ORDER BY post.created_at DESC
LIMIT 5 OFFSET $1
`

type GetPostsRow struct {
	ID          uuid.UUID        `json:"id"`
	Title       string           `json:"title"`
	Body        string           `json:"body"`
	CreatedAt   pgtype.Timestamp `json:"createdAt"`
	UpdatedAt   pgtype.Timestamp `json:"updatedAt"`
	AuthorEmail pgtype.Text      `json:"authorEmail"`
}

func (q *Queries) GetPosts(ctx context.Context, offset int32) ([]GetPostsRow, error) {
	rows, err := q.db.Query(ctx, getPosts, offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPostsRow{}
	for rows.Next() {
		var i GetPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Body,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AuthorEmail,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :one
UPDATE post SET title = $3, body = $4, updated_at = NOW() WHERE id = $1 AND author_id = $2 RETURNING id, author_id, title, body, status, created_at, updated_at, deleted_at
`

type UpdatePostParams struct {
	ID       uuid.UUID `json:"id"`
	AuthorID uuid.UUID `json:"authorId"`
	Title    string    `json:"title"`
	Body     string    `json:"body"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, updatePost,
		arg.ID,
		arg.AuthorID,
		arg.Title,
		arg.Body,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.Title,
		&i.Body,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
